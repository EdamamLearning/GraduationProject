plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdk Config.compile_sdk

    defaultConfig {
        applicationId Config.application_id
        minSdk Config.min_sdk
        targetSdk Config.target_sdk
        versionCode Releases.version_code
        versionName Releases.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility Config.java_version
        targetCompatibility Config.java_version
    }
    kotlinOptions {
        jvmTarget = Config.jvm_target
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes.each {
        Properties properties = new Properties()

        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        def appId = properties.getProperty("app_id", "")
        it.buildConfigField "String", "APP_ID", appId

        Properties _properties = new Properties()

        _properties.load(project.rootProject.file("local.properties").newDataInputStream())
        def appKey = _properties.getProperty("app_key", "")
        it.buildConfigField "String", "APP_KEY", appKey
    }

}

dependencies {

    //Dagger
    implementation Dagger.dagger_d
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt Dagger.dagger_k

    //Room
    implementation Room.room_runtime
    kapt Room.room_compiler
    implementation Room.room_ktx

    // Retrofit
    implementation Retrofit.retrofit
    implementation Retrofit.retrofit_converter_gson

    //okHttp
    implementation OkHttpDeps.ok_http
    implementation OkHttpDeps.ok_http_logging_interceptor

    //Glide
    implementation Glide.glide

    //Jetpack navigation
    implementation JetpackNavigation.navigation_fragment
    implementation JetpackNavigation.navigation_ui

    //Coroutines
    implementation Coroutines.coroutines_core
    implementation Coroutines.coroutines_android

    //LifecycleComponents
    implementation LifecycleComponents.runtime_ktx
    implementation LifecycleComponents.viewmodel_ktx

    //Kotlin
    implementation Kotlin.kotlin_cote_ktx

    //Ui design
    implementation Design.appcompat
    implementation Design.material
    implementation Design.constraint_layout

    // Navigation libraries
    implementation JetpackNavigation.navigation_fragment
    implementation JetpackNavigation.navigation_ui

    // https://github.com/kirich1409/ViewBindingPropertyDelegate/releases
    implementation Ui.view_binding

    //Timber
    implementation Timber.timber

    //Test
    testImplementation TestImpl.junit
    androidTestImplementation TestImpl.ext_junit
    androidTestImplementation TestImpl.espresso_core
}